import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';
import { debugLog } from './utils';

export interface DiffConfig {
  sourceBranch: string;
  targetBranch: string;
  outputFile: string;
}

export async function generateDiff(config: DiffConfig): Promise<string | null> {
  const gitExtension = vscode.extensions.getExtension('vscode.git');
  if (!gitExtension) {
    vscode.window.showErrorMessage('Git extension is not available');
    return null;
  }

  const git = gitExtension.exports.getAPI(1);
  const repository = git.repositories[0];
  
  if (!repository) {
    vscode.window.showErrorMessage('No Git repository found in the current workspace');
    return null;
  }

  try {
    debugLog(`Generating diff between ${config.sourceBranch} and ${config.targetBranch}`);
    
    const changes = await repository.diffBetween(config.sourceBranch, config.targetBranch);
    
    if (!changes || changes.length === 0) {
      vscode.window.showInformationMessage('No differences found between the branches');
      return null;
    }

    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];
    if (!workspaceFolder) {
        throw new Error('No workspace folder found');
    }

    const outputPath = path.join(workspaceFolder.uri.fsPath, config.outputFile);
    
    let output = "--- START OF HEADER ---\n";
    output += `Generated on: ${new Date().toISOString()}\n`;
    output += "Generated by: VS Code Code Packer Extension\n";
    output += "Purpose: Git branch diff for analysis\n";
    output += `Source Branch: ${config.sourceBranch}\n`;
    output += `Target Branch: ${config.targetBranch}\n`;
    output += "--- END OF HEADER ---\n\n";

    for (const change of changes) {
      const relativePath = vscode.workspace.asRelativePath(change.uri);
      let diffContent = '';

      try {
        if (change.status === 1) {
          diffContent = await repository.diffWith(config.targetBranch, change.uri.fsPath);
        } else if (change.status === 5) {
          diffContent = await repository.diffWith(config.targetBranch, change.uri.fsPath);
        }

        if (diffContent?.trim()) {
          output += `=== ${relativePath} ===\n`;
          output += `Status: ${change.status === 1 ? 'Added' : change.status === 5 ? 'Modified' : 'Status ' + change.status}\n\n`;
          output += diffContent + "\n";
          output += "=== END FILE ===\n\n";
        }
      } catch (error) {
        debugLog(`Error getting content for ${relativePath}:`, error);
      }
    }

    await fs.promises.writeFile(outputPath, output, 'utf8');
    debugLog('Diff file written successfully:', outputPath);

    return output;
  } catch (error) {
    console.error('Error generating diff:', error);
    vscode.window.showErrorMessage(`Failed to generate diff: ${error}`);
    return null;
  }
}

export async function getBranches(): Promise<string[]> {
    const gitExtension = vscode.extensions.getExtension('vscode.git');
    if (!gitExtension) {
        throw new Error('Git extension is not available');
    }

    const git = gitExtension.exports.getAPI(1);
    const repository = git.repositories[0];
    
    if (!repository) {
        throw new Error('No Git repository found in the current workspace');
    }

    const branches = await repository.getBranches();
    return branches.map((branch: {name: any; toString: () => any;}) => branch.name || branch.toString());
}

export async function promptForDiffConfig(): Promise<DiffConfig | null> {
    try {
        const branches = await getBranches();
        
        const sourceBranch = await vscode.window.showQuickPick(branches, {
            placeHolder: 'Select source branch',
            title: 'Select Source Branch'
        });
        
        if (!sourceBranch) {
            return null;
        }

        const targetBranch = await vscode.window.showQuickPick(
            branches.filter(b => b !== sourceBranch),
            {
                placeHolder: 'Select target branch',
                title: 'Select Target Branch'
            }
        );
        
        if (!targetBranch) {
            return null;
        }

        const defaultFileName = `diff_${sourceBranch.replace(/[^a-z0-9]/gi, '_')}_${targetBranch.replace(/[^a-z0-9]/gi, '_')}.txt`;
        const outputFile = await vscode.window.showInputBox({
            prompt: 'Enter output file name',
            value: defaultFileName,
            validateInput: input => {
                if (!input.trim()) {
                    return 'Output file name cannot be empty';
                }
                return null;
            }
        });

        if (!outputFile) {
            return null;
        }

        return {
            sourceBranch,
            targetBranch,
            outputFile
        };
    } catch (error) {
        vscode.window.showErrorMessage(`Error configuring diff: ${error}`);
        return null;
    }
}
